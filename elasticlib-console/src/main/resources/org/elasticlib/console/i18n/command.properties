#
# Copyright 2014 Guillaume Masclet <guillaume.masclet@yahoo.fr>.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Config
#
config.summary=Display current config
reset.summary=Reset config
set.summary=Set a config value
unset.summary=Unset a config value

#
# Contents
#
delete.summary=Delete an existing content
delete.description=Physically delete an existing content and remove it from search index. \
However, its metadata is not deleted and a new orphean metadata revision is even created \
(in order to enable replication of this deletion).

digest.summary=Compute actual hash and length of an existing content
digest.description=This command enables to check that an existing content has not been altered. \
It computes its current SHA-1 and length. \
Computed values should match those obtained from the content metadata (which are computed at creation).

find.summary=Search contents
find.description=Metadata of all contents in a repository is indexed. \
This command issues a search against the current repository index and retrieve relevant contents. \
It takes a Lucene search query as a parameter. \n\
\n\
Search fields (which can be auto-completed by typing <tab>) correspond to the metadata fields. \
When a search is issued without specifying a field, \
the default one is 'body' which corresponds to the content itself.

get.summary=Download an existing content
get.description=Download an existing content from current repository and save it in current working directory.

head.summary=Print head metadata revisions of a given content
head.description=Display the latest metadata revision of a given content. \
This command is close to 'revisions' but prune displayed revisions to the latest one(s). \
In case of a conflict, which can happen in the advent of concurrent replications, \
the latest revision may not be unique. In this case, all conflicting revisions are displayed.

history.summary=Print current repository history
history.description=All operations done on a repository are recorded (in particular, for replication purposes). \
This command displays this history, for the current repository. Each issued operation is recorded with:\n\
\n\
- A sequence number, which serves as an identifier.\n\
- Associated content and metadata revision SHA-1.\n\
- The operation type (a content creation, deletion or a metadata update).\n\
- A timestamp.

put.summary=Import content(s) in current repository
put.description=If supplied path points to a file, a new content is created in current repository from this file. \
If it points to a folder, a new content is created from each file in this folder and its sub-folders. \
For each file imported, the following happens:\n\
\n\
- A SHA-1 cryptographic hash of the content of the file is computed. \
It creates a long number that (in practice) uniquely identifies the file. \
It is used as the identifier of the content in the repository.\n\
\n\
- If a content with this hash is already stored in the repository, the process stops there, \
indicating that the content is already stored. Otherwise metadata is automatically extracted from the file.\n\
\n\
- The content of the file is then uploaded to the repository along with extracted metadata.

revisions.summary=Print all metadata revisions of a given content
revisions.description=List all metadata revisions of a given content, sorted by topogical order, \
from the latest to the oldest. \n\
\n\
See also related commands 'head' and 'tree'.

tree.summary=Print metadata revisions tree of a given content
tree.description=Display all metadata revisions of a given content as a tree, sorted by topological order. \
Compared to 'revisions' this allows to see if conflicting updates have happened, \
and how they have been resolved.

update.summary=Update info about an existing content
update.description=A repository content never changes (but can be deleted). \
In contrast, metadata associated with each content is versioned. \
When you create a content, a snapshot of associated metadata is stored along. \
Using the update command, you can modify this metadata. It will create a second revision. \
Each metadata revision is stamped with a SHA-1.\n\
\n\
The update command loads the current metadata revision of a given content in an editor of your choice. \
For this to be done, you have to define which editor to use in the configuration (see 'help @config'). \
If you modify opened revision, save and close the editor, a new revision is created.

#
# Misc
#
about.summary=Print info about this app
cd.summary=Change current working directory
help.summary=Print help about a command or a category of commands
ls.summary=Print current working directory content
osCommand.summary=Execute an OS specific command
pwd.summary=Print current working directory
quit.summary=Leave this console

#
# Node
#
connect.summary=Connect to a node
connect.description=Most commands are issued toward a given node. \
Therefore, you first have to connect to a node using this command. \
It takes the URI of the node as sole argument.\n\
\n\
Completion (by typing <tab>) may be used here to find nodes on the local network, \
which may be automatically discovered.\n\
\n\
Once successfully connected, the node name appears on the command prompt.

disconnect.summary=Disconnect from current node
disconnect.description=See also the 'connect' command.

leave.summary=Stop using current repository
leave.description=See also the 'use' command.

node.summary=Display info about current node
node.description=These info are:\n\
- Its name.\n\
- Its GUID, which is a ramdomly generated unique identifier.\n\
- Its publish URI(s), which are URIs to use to connect to this node.\n\
- Its repositories.

use.summary=Select repository to use
use.description=All contents related command are issued toward a given repository. \
Therefore, you first have to select which one with this command. \
It takes the name or the GUID of the repository as sole argument.\n\
\n\
Completion (using the <tab> key) may be used here to list existing repositories.\n\
\n\
Once successfully selected, the repository name appears on the command prompt.

#
# Remotes
#
addRemote.summary=Add a remote node to current node
addRemote.description=Remote nodes are automatically added unless discovery is desactivated. \
This command is intended for this case or if a given node is not found by automatic discovery.

remotes.summary=List existing remote nodes
remotes.description=Provides detailled information about each remote node known by the current node:\n\
- Its name.\n\
- Its GUID.\n\
- Its publish URI(s), those advertized by the remote node.\n\
- Its transport URI, actually used to connect to the remote node.\n\
- If the remote node is currently reachable.\n\
- The latest date at which the remote node status has been refreshed.\n\
- Its repositories.\n\
\n\
Each node monitors its remote nodes, so this information is periodically refreshed. \
If a remote is no longer reachable, displays the latest information known about it.

removeRemote.summary=Remove a remote node
removeRemote.description=Manually stops tracking a remote node. \
However, unless cleanup is desactivated, unreachable remote nodes are automatically removed after an expiration delay. \
This command does not prevent a removed node to be latter added by automatic discovery if it is still reachable.

#
# Replications
#
createReplication.summary=Create a new replication
createReplication.description=The first argument of this command is the source repository \
and the second one is the destination repository. \
Source and destination repositories may be either local or remote ones.\n\
\n\
Replications are used to synchronize repositories. They are:\n\
- Asynchronous: this command returns immediately, but the replication occurs in the background afterwards.\n\
- Continuous: once the replication is set up, any past or future operation on the source repository \
is replicated on the destination repository.\n\
- One-way: to set up a two-way synchronization, another replication from the destination \
repository to the source one is needed.

dropReplication.summary=Physically delete an existing replication
dropReplication.description=Immediately stop and delete the replication. \
However, replicated operations are not undone.

replications.summary=List existing replications
replications.description=Provide detailled information about each replication on this node:\n\
- Its GUID, which is a ramdomly generated unique identifier.\n\
- Its type.\n\
- Information about its source and destination repositories.\n\
- If it is started or not.\n\
\n\
If the replication is started, information about its agent is also displayed. \
This agent is responsible for actually replicating operations in the background.\n\
\n\
The replication type can be either:\n\
- local: source and destination repositories are both local ones.\n\
- push: local source repository and remote destination repository.\n\
- pull: remote source repository and local destination repository.\n\
- remote: source and destination repositories are both remote ones.

start.summary=Start an existing replication
start.description=Resume a previously paused replication.\n\
\n\
See also the 'stop' command.

stop.summary=Stop an existing replication, without deleting it
stop.description=Temporary pause supplied replication. \
Operations on the source repository are no longer replicated on the destination repository. \
However, the replication state is kept.\n\
\n\
The replication can be resumed latter with the 'start' command.

#
# Repositories
#
addRepository.summary=Add an existing repository
addRepository.description=Mount the directory located at supplied path as a local repository on this node. \
Supplied directory is expected to correspond to a previously unmounted repository.\n\
\n\
See also the 'remove repository' command.

close.summary=Close an existing repository
close.description=Once closed, the repository is unavailable. \
All replications from or to this repository are stopped and any pending operation is aborted. \
This command is useful to ensure repository files are not modified on disk, for instance when doing a backup.\n\
\n\
The closed repository can be opened latter with the 'open' command.

createRepository.summary=Create a new repository
createRepository.description=Initialize an empty repository in the directory located at supplied path. \
This directory must be empty. It is created if it does not exist. \
The created repository is automatically opened upon completion.

dropRepository.summary=Physically delete an existing repository
dropRepository.description=Unmount an existing local repository \
and delete its containing directory from the file-system. \
All replications from or to this repository are automatically dropped.

open.summary=Open an existing repository
open.description=This open a previously closed repository. \
All replications from or to this repository are resumed.\n\
\n\
See also the 'close' command.

removeRepository.summary=Remove an existing repository, without deleting it
removeRepository.description=Unmount an existing local repository. \
All replications from or to this repository are automatically dropped and any pending operation \
on this repository is aborted. \
However, its containing directory is not deleted from the file-system.\n\
\n\
This directory can then be safely moved elsewhere on the file-system or on another device \
and mounted back with the 'add repository' command.

repositories.summary=List existing repositories
repositories.description=Provide detailled information about each local repository on this node:\n\
- Its name, which correspond to its containing directory name.\n\
- Its GUID, which is a ramdomly generated unique identifier.\n\
- Its path on the file-system.\n\
- If it is open or not.\n\
\n\
If the repository is open, displayed information also includes:\n\
- Detailled statistics about the repository.\n\
- Information about each agent related to the repository.\n\
\n\
The repository statistics indicates the number of created, updated and deleted contents, \
and the number of contents per metadata type. \
The repository internal agents are used to asynchronously index contents metadata \
and to compute related statistics.
